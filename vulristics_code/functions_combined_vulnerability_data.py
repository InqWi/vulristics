from vulristics_code import functions_analysis_text, functions_source_ms_cve, functions_source_epss_cve, functions_source_nvd_cve, \
    functions_source_vulners, functions_tools, functions_source_attackerkb_cve, data_classification_vulnerability_types
import credentials
import re
import os
import json
import html
import copy

reuse_combined = False

def add_ms_cve_data(enabled_data_sources, all_cves, cve_data_all, cves_to_exclude, rewrite_flag):
    if "ms" in enabled_data_sources:
        functions_tools.print_debug_message("Collecting MS CVE data...")
        ms_cve_data_all = dict()
        n = 0
        m = len(all_cves)
        for cve_id in all_cves:
            print(str(n+1) + "/" + str(m) + " - " + cve_id)
            ms_cve_data = functions_source_ms_cve.get_ms_cve_data(cve_id, rewrite_flag)
            if 'cveTitle' in ms_cve_data['main']:
                if ms_cve_data['main']['cveTitle'] == "RETRACTED":
                    functions_tools.print_debug_message("Adding RETRACTED " + cve_id + " to cves_to_exclude")
                    cves_to_exclude.add(cve_id)
                elif ms_cve_data['not_found_error']:
                    functions_tools.print_debug_message("Adding NOT FOUND " + cve_id + " to cves_to_exclude")
                    cves_to_exclude.add(cve_id)
                else:
                    ms_cve_data_all[cve_id] = ms_cve_data
            n += 1
        cve_data_all['ms_cve_data_all'] = ms_cve_data_all
    return cve_data_all, cves_to_exclude


def add_nvd_cve_data(enabled_data_sources, all_cves, cve_data_all, rewrite_flag):
    if "nvd" in enabled_data_sources:
        functions_tools.print_debug_message("Collecting NVD CVE data...")
        nvd_cve_data_all = dict()
        n = 0
        m = len(all_cves)
        for cve_id in all_cves:
            print(str(n+1) + "/" + str(m) + " - " + cve_id)
            nvd_cve_data = functions_source_nvd_cve.get_nvd_cve_data(cve_id, rewrite_flag)
            nvd_cve_data_all[cve_id] = nvd_cve_data
            n += 1
        cve_data_all['nvd_cve_data_all'] = nvd_cve_data_all
    return cve_data_all

def add_epss_cve_data(enabled_data_sources, all_cves, cve_data_all, rewrite_flag):
    if "epss" in enabled_data_sources:
        functions_tools.print_debug_message("Collecting EPSS CVE data...")
        epss_cve_data_all = dict()
        n = 0
        m = len(all_cves)
        for cve_id in all_cves:
            print(str(n+1) + "/" + str(m) + " - " + cve_id)
            nvd_cve_data = functions_source_epss_cve.get_epss_cve_data(cve_id, rewrite_flag)
            epss_cve_data_all[cve_id] = nvd_cve_data
            n += 1
        cve_data_all['epss_cve_data_all'] = epss_cve_data_all
    return cve_data_all


def add_attackerkb_cve_data(enabled_data_sources, all_cves, cve_data_all, rewrite_flag):
    if "attackerkb" in enabled_data_sources:
        functions_tools.print_debug_message("Collecting AttackerKB CVE data...")
        attackerkb_cve_data_all = dict()
        n = 0
        m = len(all_cves)
        for cve_id in all_cves:
            print(str(n+1) + "/" + str(m) + " - " + cve_id)
            attackerkb_cve_data = functions_source_attackerkb_cve.get_attackerkb_cve_data(cve_id, rewrite_flag)
            attackerkb_cve_data_all[cve_id] = attackerkb_cve_data
            n += 1
        cve_data_all['attackerkb_cve_data_all'] = attackerkb_cve_data_all
    return cve_data_all


def add_vulners_cve_data(enabled_data_sources, all_cves, cve_data_all, rewrite_flag):
    if "vulners" in enabled_data_sources:
        functions_tools.print_debug_message("Collecting Vulners CVE data...")
        vulners_cve_data_all = dict()
        if credentials.vulners_key != "":  # If we  have Vulners API key
            n = 0
            m = len(all_cves)
            for cve_id in all_cves:
                print(str(n+1) + "/" + str(m) + " - " + cve_id)
                vulners_cve_data = functions_source_vulners.get_vulners_data(cve_id, rewrite_flag)
                vulners_cve_data_all[cve_id] = vulners_cve_data
                n+=1
        cve_data_all['vulners_cve_data_all'] = vulners_cve_data_all
    return cve_data_all


def add_combined_cve_data_basic_severity(cve_data_all, cve_id):
    # Combining the data about the Basic Severity
    cve_data_all['combined_cve_data_all'][cve_id]['basic_severity'] = ""
    cve_data_all['combined_cve_data_all'][cve_id]['basic_severity_detection_comment'] = ""
    # Microsoft has the most accurate data, so I give it the first priority
    if cve_data_all['combined_cve_data_all'][cve_id]['basic_severity'] == "":
        if 'ms_cve_data_all' in cve_data_all:
            if cve_id in cve_data_all['ms_cve_data_all']:
                if 'basic_severity' in cve_data_all['ms_cve_data_all'][cve_id]:
                    cve_data_all['combined_cve_data_all'][cve_id]['basic_severity'] = \
                        cve_data_all['ms_cve_data_all'][cve_id]['basic_severity']
                    cve_data_all['combined_cve_data_all'][cve_id]['basic_severity_detection_comment'] = \
                        "Based on Microsoft title"
    # If there is no data in MS, let's get it from NVD description
    if cve_data_all['combined_cve_data_all'][cve_id]['basic_severity'] == "":
        if 'nvd_cve_data_all' in cve_data_all:
            if cve_id in cve_data_all['nvd_cve_data_all']:
                if 'basic_severity' in cve_data_all['nvd_cve_data_all'][cve_id]:
                    cve_data_all['combined_cve_data_all'][cve_id]['basic_severity'] = \
                        cve_data_all['nvd_cve_data_all'][cve_id]['basic_severity']
                    cve_data_all['combined_cve_data_all'][cve_id]['basic_severity_detection_comment'] = \
                        "Based on NVD description"
    # If there is no data in NVD, let's get it from Vulners description
    if cve_data_all['combined_cve_data_all'][cve_id]['basic_severity'] == "":
        if 'vulners_cve_data_all' in cve_data_all:
            if cve_id in cve_data_all['vulners_cve_data_all']:
                if 'basic_severity' in cve_data_all['vulners_cve_data_all'][cve_id]:
                    cve_data_all['combined_cve_data_all'][cve_id]['basic_severity'] = \
                        cve_data_all['vulners_cve_data_all'][cve_id]['basic_severity']
                    cve_data_all['combined_cve_data_all'][cve_id]['basic_severity_detection_comment'] = \
                        "Based on Vulners description"
    # If it's still empty, then set it to  "Unknown type"
    if cve_data_all['combined_cve_data_all'][cve_id]['basic_severity'] == "":
        cve_data_all['combined_cve_data_all'][cve_id]['basic_severity'] = "Unknown Basic Severity"
        cve_data_all['combined_cve_data_all'][cve_id]['basic_severity_detection_comment'] = "Detection methods failed"
    return cve_data_all


def add_combined_cve_data_cvss_base_score(cve_data_all, cve_id):
    # Combining the data about the CVSS Base Score
    cve_data_all['combined_cve_data_all'][cve_id]['cvss_base_score'] = ""
    cve_data_all['combined_cve_data_all'][cve_id]['cvss_base_score_detection_comment'] = ""
    # Microsoft has the most accurate data, so I give it the first priority
    if cve_data_all['combined_cve_data_all'][cve_id]['cvss_base_score'] == "":
        if 'ms_cve_data_all' in cve_data_all:
            if cve_id in cve_data_all['ms_cve_data_all']:
                if 'cvss_base_score' in cve_data_all['ms_cve_data_all'][cve_id]:
                    cve_data_all['combined_cve_data_all'][cve_id]['cvss_base_score'] = \
                        cve_data_all['ms_cve_data_all'][cve_id]['cvss_base_score']
                    cve_data_all['combined_cve_data_all'][cve_id]['cvss_base_score_detection_comment'] = \
                        "According to Microsoft data source"
    # If there is no data in MS, let's get it from NVD description
    if cve_data_all['combined_cve_data_all'][cve_id]['cvss_base_score'] == "":
        if 'nvd_cve_data_all' in cve_data_all:
            if cve_id in cve_data_all['nvd_cve_data_all']:
                if 'cvss_base_score' in cve_data_all['nvd_cve_data_all'][cve_id]:
                    cve_data_all['combined_cve_data_all'][cve_id]['cvss_base_score'] = \
                        cve_data_all['nvd_cve_data_all'][cve_id]['cvss_base_score']
                    cve_data_all['combined_cve_data_all'][cve_id]['cvss_base_score_detection_comment'] = \
                        "According to NVD data source"
    # If there is no data in NVD, let's get it from Vulners description
    if cve_data_all['combined_cve_data_all'][cve_id]['cvss_base_score'] == "":
        if 'vulners_cve_data_all' in cve_data_all:
            if cve_id in cve_data_all['vulners_cve_data_all']:
                if 'cvss_base_score' in cve_data_all['vulners_cve_data_all'][cve_id]:
                    cve_data_all['combined_cve_data_all'][cve_id]['cvss_base_score'] = \
                        cve_data_all['vulners_cve_data_all'][cve_id]['cvss_base_score']
                    cve_data_all['combined_cve_data_all'][cve_id]['cvss_base_score_detection_comment'] = \
                        "According to Vulners data source"
    # If it's still empty, then set it to  "Unknown type"
    if cve_data_all['combined_cve_data_all'][cve_id]['cvss_base_score'] == "":
        cve_data_all['combined_cve_data_all'][cve_id]['cvss_base_score'] = "Unknown CVSS Base Score"
        cve_data_all['combined_cve_data_all'][cve_id]['cvss_base_score_detection_comment'] = "Detection methods failed"
    return cve_data_all



def add_combined_cve_data_description_product_vuln_type(cve_data_all, product_data, cve_id):
    # Combining the data about Vulnerability Description

    all_detected_products = list()
    all_detected_vuln_types = list()
    source_to_full_description = dict()
    for source in cve_data_all:
        title = ""
        if cve_id in cve_data_all[source]:
            if 'title' in cve_data_all[source][cve_id]:
                title = cve_data_all[source][cve_id]['title']
        description = ""
        if cve_id in cve_data_all[source]:
            if 'description' in cve_data_all[source][cve_id]:
                description =  html.escape(cve_data_all[source][cve_id]['description'])
        full_description = ""
        if title == description or title == "":
            full_description = description
        elif description == "":
            full_description = title
        else:
            full_description = title + ". " + description
        source_to_full_description[source] = full_description
        # Detecting products
        detected_products = functions_analysis_text.get_products_from_description(source,
                                                                                  full_description,
                                                                                  product_data)
        if detected_products:
            for detected_product in detected_products:
                all_detected_products.append(detected_product)

        # Detecting vulnerability types
        vulnerability_data = data_classification_vulnerability_types.vulnerability_type_data
        detected_vuln_types = functions_analysis_text.get_vulnerability_type_from_description(source, full_description,
                                                                                              vulnerability_data)
        if detected_vuln_types:
            for detected_vuln_type in detected_vuln_types:
                all_detected_vuln_types.append(detected_vuln_type)

    # Choosing detected_products
    detection_priority_levels = set()
    for line in all_detected_products:
        detection_priority_levels.add(line['product_data']['detection_priority'])
    max_detection_priority_level = 0
    if detection_priority_levels != set():
        max_detection_priority_level = max(detection_priority_levels)

    prevalence_among_max_detections = set()
    for line in all_detected_products:
        if line['product_data']['detection_priority'] == max_detection_priority_level:
            prevalence_among_max_detections.add(line['product_data']['prevalence'])
    max_prevalence_among_max_detections = 0
    if prevalence_among_max_detections != set():
        max_prevalence_among_max_detections = max(prevalence_among_max_detections)

    detected_products = dict()
    for line in all_detected_products:
        if line['product_data']['detection_priority'] == max_detection_priority_level:
            if line['product_data']['prevalence'] == max_prevalence_among_max_detections:
                detected_products[line['source']] = line

    vuln_types = dict()

    # Choosing vulnerability types
    vuln_type_data_criticality = set()
    for line in all_detected_vuln_types:
        vuln_type_data_criticality.add(line['vuln_type_data']['criticality'])
    if vuln_type_data_criticality != set():
        max_vuln_type_data_criticality = max(vuln_type_data_criticality)
        for line in all_detected_vuln_types:
            if line['vuln_type_data']['criticality'] == max_vuln_type_data_criticality:
                vuln_types[line['source']] = line

    # Looking for one source for vuln_type and
    one_source = ""
    detected_product_source = ""
    vuln_type_source = ""
    for detected_product_source in detected_products:
        for vuln_type_source in vuln_types:
            if vuln_type_source == detected_product_source:
                one_source = vuln_type_source # source with both detected_product and vuln_type detection
    if one_source != "":
        detected_product_source = one_source
        vuln_type_source = one_source
    else:
        if len(detected_products.keys()) != 0:
            detected_product_source = list(detected_products.keys())[0]
        if len(vuln_types.keys()) != 0:
            vuln_type_source = list(vuln_types.keys())[0]

    cve_data_all['combined_cve_data_all'][cve_id]['description'] = str(source_to_full_description)

    if detected_product_source in detected_products:
        cve_data_all['combined_cve_data_all'][cve_id]['vuln_product'] = detected_products[detected_product_source][
            'product']
    else:
        cve_data_all['combined_cve_data_all'][cve_id]['vuln_product'] = "Unknown Product"

    if vuln_type_source in vuln_types:
        cve_data_all['combined_cve_data_all'][cve_id]['vuln_type'] = vuln_types[vuln_type_source]['vuln_type']
    else:
        cve_data_all['combined_cve_data_all'][cve_id]['vuln_type'] = "Unknown Vulnerability Type"

    if one_source != "":
        description = source_to_full_description[one_source]
        cve_data_all['combined_cve_data_all'][cve_id]['description_detection_comment'] = "Based on " + re.sub(
            "_cve_data_all", "", one_source).upper() + " data"
        tagged_description = copy.copy(description)
        range = detected_products[one_source]['ranges'][0]
        substring = description[range['start']:range['end']]
        if not "<product>" in tagged_description:
            tagged_description = tagged_description.replace(substring, "<product>"  + substring + "</product>")
        range = vuln_types[one_source]['ranges'][0]
        substring = description[range['start']:range['end']]
        if not "<vulntype>" in tagged_description:
            tagged_description = tagged_description.replace(substring, "<vulntype>"  + substring + "</vulntype>")
        cve_data_all['combined_cve_data_all'][cve_id]['description'] = tagged_description
    else:
        cve_data_all['combined_cve_data_all'][cve_id]['description_detection_comment'] = ""

    return cve_data_all


def add_combined_cve_data(all_cves, cve_data_all, product_data):
    cve_data_all['combined_cve_data_all'] = dict()
    n = 0
    m = len(all_cves)
    functions_tools.print_debug_message("Combining CVE data...")
    for cve_id in all_cves:
        n += 1
        print(str(n) + "/" + str(m) + " " + cve_id)
        file_path_processed = "data/combined/" + cve_id + ".json"
        if not os.path.exists(file_path_processed) or not reuse_combined:
            cve_data_all['combined_cve_data_all'][cve_id] = dict()
            cve_data_all = add_combined_cve_data_description_product_vuln_type(cve_data_all, product_data, cve_id)
            cve_data_all = add_combined_cve_data_basic_severity(cve_data_all, cve_id)
            cve_data_all = add_combined_cve_data_cvss_base_score(cve_data_all, cve_id)
            f = open(file_path_processed, "w")
            f.write(json.dumps(cve_data_all['combined_cve_data_all'][cve_id]))
            f.close()
        else:
            f = open(file_path_processed, "r")
            cve_data_all['combined_cve_data_all'][cve_id] = json.loads(f.read())
            f.close()
    return cve_data_all

def collect_cve_related_data(enabled_data_sources, all_cves, cves_to_exclude, product_data, rewrite_flag):
    """
    Collecting vulnerability data from the supported sources and
    combining basic vulnerability data in combined_cve_data_all
    :param all_cves:
    :param rewrite_flag:
    :return:
    """

    # Collecting vulnerability data from the supported sources
    functions_tools.print_debug_message("Counting CVE scores...")
    cve_data_all = dict()
    cve_data_all, cves_to_exclude =  add_ms_cve_data(enabled_data_sources, all_cves, cve_data_all, cves_to_exclude,
                                                     rewrite_flag)
    cve_data_all = add_nvd_cve_data(enabled_data_sources, all_cves, cve_data_all, rewrite_flag)
    cve_data_all = add_epss_cve_data(enabled_data_sources, all_cves, cve_data_all, rewrite_flag)
    cve_data_all = add_attackerkb_cve_data(enabled_data_sources, all_cves, cve_data_all, rewrite_flag)
    cve_data_all = add_vulners_cve_data(enabled_data_sources, all_cves, cve_data_all, rewrite_flag)
    cve_data_all = add_combined_cve_data(all_cves, cve_data_all, product_data)
    return cve_data_all, cves_to_exclude