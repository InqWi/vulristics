import functions_tools
import functions_source_ms_cve
import functions_source_attackerkb_cve
import functions_source_vulners
import functions_source_nvd_cve
import credentials

def add_ms_cve_data(enabled_data_sources, all_cves, cve_data_all, cves_to_exclude, rewrite_flag):
    if "ms" in enabled_data_sources:
        functions_tools.print_debug_message("Collecting MS CVE data...")
        ms_cve_data_all = dict()
        for cve_id in all_cves:
            ms_cve_data = functions_source_ms_cve.get_ms_cve_data(cve_id, rewrite_flag)
            if 'cveTitle' in ms_cve_data['main']:
                if ms_cve_data['main']['cveTitle'] == "RETRACTED":
                    functions_tools.print_debug_message("Adding RETRACTED " + cve_id + " to cves_to_exclude")
                    cves_to_exclude.add(cve_id)
                elif ms_cve_data['not_found_error']:
                    functions_tools.print_debug_message("Adding NOT FOUND " + cve_id + " to cves_to_exclude")
                    cves_to_exclude.add(cve_id)
                else:
                    ms_cve_data_all[cve_id] = ms_cve_data
        cve_data_all['ms_cve_data_all'] = ms_cve_data_all
    return cve_data_all, cves_to_exclude


def add_nvd_cve_data(enabled_data_sources, all_cves, cve_data_all, rewrite_flag):
    if "nvd" in enabled_data_sources:
        functions_tools.print_debug_message("Collecting NVD CVE data...")
        nvd_cve_data_all = dict()
        for cve_id in all_cves:
            nvd_cve_data = functions_source_nvd_cve.get_nvd_cve_data(cve_id, rewrite_flag)
            nvd_cve_data_all[cve_id] = nvd_cve_data
        cve_data_all['nvd_cve_data_all'] = nvd_cve_data_all
    return cve_data_all


def add_attackerkb_cve_data(enabled_data_sources, all_cves, cve_data_all, rewrite_flag):
    if "attackerkb" in enabled_data_sources:
        functions_tools.print_debug_message("Collecting AttackerKB CVE data...")
        attackerkb_cve_data_all = dict()
        for cve_id in all_cves:
            attackerkb_cve_data = functions_source_attackerkb_cve.get_attackerkb_cve_data(cve_id, rewrite_flag)
            attackerkb_cve_data_all[cve_id] = attackerkb_cve_data
        cve_data_all['attackerkb_cve_data_all'] = attackerkb_cve_data_all
    return cve_data_all


def add_vulners_cve_data(enabled_data_sources, all_cves, cve_data_all, rewrite_flag):
    if "vulners" in enabled_data_sources:
        functions_tools.print_debug_message("Collecting Vulners CVE data...")
        vulners_cve_data_all = dict()
        if credentials.vulners_key != "":  # If we  have Vulners API key
            for cve_id in all_cves:
                vulners_cve_data = functions_source_vulners.get_vulners_data(cve_id, rewrite_flag)
                vulners_cve_data_all[cve_id] = vulners_cve_data
        cve_data_all['vulners_cve_data_all'] = vulners_cve_data_all
    return cve_data_all


def add_combined_cve_data_vuln_product(cve_data_all, cve_id):
    # Combining the data about the Product
    cve_data_all['combined_cve_data_all'][cve_id]['vuln_product'] = ""
    cve_data_all['combined_cve_data_all'][cve_id]['vuln_product_detection_comment'] = ""
    # Microsoft has the most accurate data, so I give it the first priority
    if cve_data_all['combined_cve_data_all'][cve_id]['vuln_product'] == "":
        if 'ms_cve_data_all' in cve_data_all:
            if cve_id in cve_data_all['ms_cve_data_all']:
                if 'vuln_product' in cve_data_all['ms_cve_data_all'][cve_id]:
                    cve_data_all['combined_cve_data_all'][cve_id]['vuln_product'] = \
                        cve_data_all['ms_cve_data_all'][cve_id]['vuln_product']
                    cve_data_all['combined_cve_data_all'][cve_id]['vuln_product_detection_comment'] = \
                        "Based on Microsoft title"
    # If there is no data in MS, let's get it from NVD description
    if cve_data_all['combined_cve_data_all'][cve_id]['vuln_product'] == "":
        if 'nvd_cve_data_all' in cve_data_all:
            if cve_id in cve_data_all['nvd_cve_data_all']:
                if 'vuln_product' in cve_data_all['nvd_cve_data_all'][cve_id]:
                    cve_data_all['combined_cve_data_all'][cve_id]['vuln_product'] = \
                        cve_data_all['nvd_cve_data_all'][cve_id]['vuln_product']
                    cve_data_all['combined_cve_data_all'][cve_id]['vuln_product_detection_comment'] = \
                        "Based on NVD description"
    # If there is no data in NVD, let's get it from Vulners description
    if cve_data_all['combined_cve_data_all'][cve_id]['vuln_product'] == "":
        if 'vulners_cve_data_all' in cve_data_all:
            if cve_id in cve_data_all['vulners_cve_data_all']:
                if 'vuln_product' in cve_data_all['vulners_cve_data_all'][cve_id]:
                    cve_data_all['combined_cve_data_all'][cve_id]['vuln_product'] = \
                        cve_data_all['vulners_cve_data_all'][cve_id]['vuln_product']
                    cve_data_all['combined_cve_data_all'][cve_id]['vuln_product_detection_comment'] = \
                        "Based on Vulners description"
    # If it's still empty, then set it to "Unknown Product"
    if cve_data_all['combined_cve_data_all'][cve_id]['vuln_product'] == "":
        cve_data_all['combined_cve_data_all'][cve_id]['vuln_product'] = "Unknown Product"
        cve_data_all['combined_cve_data_all'][cve_id]['vuln_product_detection_comment'] = "Detection methods failed"
    return cve_data_all


def add_combined_cve_data_vuln_type(cve_data_all, cve_id):
    # Combining the data about the Vulnerability Type
    cve_data_all['combined_cve_data_all'][cve_id]['vuln_type'] = ""
    cve_data_all['combined_cve_data_all'][cve_id]['vuln_type_detection_comment'] = ""
    # Microsoft has the most accurate data, so I give it the first priority
    if cve_data_all['combined_cve_data_all'][cve_id]['vuln_type'] == "":
        if 'ms_cve_data_all' in cve_data_all:
            if cve_id in cve_data_all['ms_cve_data_all']:
                if 'vuln_type' in cve_data_all['ms_cve_data_all'][cve_id]:
                    cve_data_all['combined_cve_data_all'][cve_id]['vuln_type'] = \
                        cve_data_all['ms_cve_data_all'][cve_id]['vuln_type']
                    cve_data_all['combined_cve_data_all'][cve_id]['vuln_type_detection_comment'] = \
                        "Based on Microsoft title"
    # If there is no data in MS, let's get it from NVD description
    if cve_data_all['combined_cve_data_all'][cve_id]['vuln_type'] == "":
        if 'nvd_cve_data_all' in cve_data_all:
            if cve_id in cve_data_all['nvd_cve_data_all']:
                if 'vuln_type' in cve_data_all['nvd_cve_data_all'][cve_id]:
                    cve_data_all['combined_cve_data_all'][cve_id]['vuln_type'] = \
                        cve_data_all['nvd_cve_data_all'][cve_id]['vuln_type']
                    cve_data_all['combined_cve_data_all'][cve_id]['vuln_type_detection_comment'] = \
                        "Based on NVD description"
    # If there is no data in VND, let's get it from Vulners description
    if cve_data_all['combined_cve_data_all'][cve_id]['vuln_type'] == "":
        if 'vulners_cve_data_all' in cve_data_all:
            if cve_id in cve_data_all['vulners_cve_data_all']:
                if 'vuln_type' in cve_data_all['vulners_cve_data_all'][cve_id]:
                    cve_data_all['combined_cve_data_all'][cve_id]['vuln_type'] = \
                        cve_data_all['vulners_cve_data_all'][cve_id]['vuln_type']
                    cve_data_all['combined_cve_data_all'][cve_id]['vuln_type_detection_comment'] = \
                        "Based on Vulners description"
    # If it's still empty, then set it to  "Unknown type"
    if cve_data_all['combined_cve_data_all'][cve_id]['vuln_type'] == "":
        cve_data_all['combined_cve_data_all'][cve_id]['vuln_type'] = "Unknown Vulnerability Type"
        cve_data_all['combined_cve_data_all'][cve_id]['vuln_type_detection_comment'] = "Detection methods failed"
    return cve_data_all


def add_combined_cve_data_basic_severity(cve_data_all, cve_id):
    # Combining the data about the Basic Severity
    cve_data_all['combined_cve_data_all'][cve_id]['basic_severity'] = ""
    cve_data_all['combined_cve_data_all'][cve_id]['basic_severity_detection_comment'] = ""
    # Microsoft has the most accurate data, so I give it the first priority
    if cve_data_all['combined_cve_data_all'][cve_id]['basic_severity'] == "":
        if 'ms_cve_data_all' in cve_data_all:
            if cve_id in cve_data_all['ms_cve_data_all']:
                if 'basic_severity' in cve_data_all['ms_cve_data_all'][cve_id]:
                    cve_data_all['combined_cve_data_all'][cve_id]['basic_severity'] = \
                        cve_data_all['ms_cve_data_all'][cve_id]['basic_severity']
                    cve_data_all['combined_cve_data_all'][cve_id]['basic_severity_detection_comment'] = \
                        "Based on Microsoft title"
    # If there is no data in MS, let's get it from NVD description
    if cve_data_all['combined_cve_data_all'][cve_id]['basic_severity'] == "":
        if 'nvd_cve_data_all' in cve_data_all:
            if cve_id in cve_data_all['nvd_cve_data_all']:
                if 'basic_severity' in cve_data_all['nvd_cve_data_all'][cve_id]:
                    cve_data_all['combined_cve_data_all'][cve_id]['basic_severity'] = \
                        cve_data_all['nvd_cve_data_all'][cve_id]['basic_severity']
                    cve_data_all['combined_cve_data_all'][cve_id]['basic_severity_detection_comment'] = \
                        "Based on NVD description"
    # If there is no data in NVD, let's get it from Vulners description
    if cve_data_all['combined_cve_data_all'][cve_id]['basic_severity'] == "":
        if 'vulners_cve_data_all' in cve_data_all:
            if cve_id in cve_data_all['vulners_cve_data_all']:
                if 'basic_severity' in cve_data_all['vulners_cve_data_all'][cve_id]:
                    cve_data_all['combined_cve_data_all'][cve_id]['basic_severity'] = \
                        cve_data_all['vulners_cve_data_all'][cve_id]['basic_severity']
                    cve_data_all['combined_cve_data_all'][cve_id]['basic_severity_detection_comment'] = \
                        "Based on Vulners description"
    # If it's still empty, then set it to  "Unknown type"
    if cve_data_all['combined_cve_data_all'][cve_id]['basic_severity'] == "":
        cve_data_all['combined_cve_data_all'][cve_id]['basic_severity'] = "Unknown Basic Severity"
        cve_data_all['combined_cve_data_all'][cve_id]['basic_severity_detection_comment'] = "Detection methods failed"
    return cve_data_all


def add_combined_cve_data_cvss_base_score(cve_data_all, cve_id):
    # Combining the data about the CVSS Base Score
    cve_data_all['combined_cve_data_all'][cve_id]['cvss_base_score'] = ""
    cve_data_all['combined_cve_data_all'][cve_id]['cvss_base_score_detection_comment'] = ""
    # Microsoft has the most accurate data, so I give it the first priority
    if cve_data_all['combined_cve_data_all'][cve_id]['cvss_base_score'] == "":
        if 'ms_cve_data_all' in cve_data_all:
            if cve_id in cve_data_all['ms_cve_data_all']:
                if 'cvss_base_score' in cve_data_all['ms_cve_data_all'][cve_id]:
                    cve_data_all['combined_cve_data_all'][cve_id]['cvss_base_score'] = \
                        cve_data_all['ms_cve_data_all'][cve_id]['cvss_base_score']
                    cve_data_all['combined_cve_data_all'][cve_id]['cvss_base_score_detection_comment'] = \
                        "Based on Microsoft data"
    # If there is no data in MS, let's get it from NVD description
    if cve_data_all['combined_cve_data_all'][cve_id]['cvss_base_score'] == "":
        if 'nvd_cve_data_all' in cve_data_all:
            if cve_id in cve_data_all['nvd_cve_data_all']:
                if 'cvss_base_score' in cve_data_all['nvd_cve_data_all'][cve_id]:
                    cve_data_all['combined_cve_data_all'][cve_id]['cvss_base_score'] = \
                        cve_data_all['nvd_cve_data_all'][cve_id]['cvss_base_score']
                    cve_data_all['combined_cve_data_all'][cve_id]['cvss_base_score_detection_comment'] = \
                        "Based on NVD data"
    # If there is no data in NVD, let's get it from Vulners description
    if cve_data_all['combined_cve_data_all'][cve_id]['cvss_base_score'] == "":
        if 'vulners_cve_data_all' in cve_data_all:
            if cve_id in cve_data_all['vulners_cve_data_all']:
                if 'cvss_base_score' in cve_data_all['vulners_cve_data_all'][cve_id]:
                    cve_data_all['combined_cve_data_all'][cve_id]['cvss_base_score'] = \
                        cve_data_all['vulners_cve_data_all'][cve_id]['cvss_base_score']
                    cve_data_all['combined_cve_data_all'][cve_id]['cvss_base_score_detection_comment'] = \
                        "Based on Vulners data"
    # If it's still empty, then set it to  "Unknown type"
    if cve_data_all['combined_cve_data_all'][cve_id]['cvss_base_score'] == "":
        cve_data_all['combined_cve_data_all'][cve_id]['cvss_base_score'] = "Unknown CVSS Base Score"
        cve_data_all['combined_cve_data_all'][cve_id]['cvss_base_score_detection_comment'] = "Detection methods failed"
    return cve_data_all


def add_combined_cve_data_description(cve_data_all, cve_id):
    # Combining the data about Vulnerability Description
    cve_data_all['combined_cve_data_all'][cve_id]['description'] = ""
    cve_data_all['combined_cve_data_all'][cve_id]['description_tags'] = ""
    cve_data_all['combined_cve_data_all'][cve_id]['description_detection_comment'] = ""
    # I take it only from NVD
    if cve_data_all['combined_cve_data_all'][cve_id]['description'] == "":
        if 'nvd_cve_data_all' in cve_data_all:
            if cve_id in cve_data_all['nvd_cve_data_all']:
                if 'description' in cve_data_all['nvd_cve_data_all'][cve_id]:
                    cve_data_all['combined_cve_data_all'][cve_id]['description'] = \
                        cve_data_all['nvd_cve_data_all'][cve_id]['description']
                    # I should use description_tags (ranges) to mark products and vuln types in the description
                    cve_data_all['combined_cve_data_all'][cve_id]['description_tags'] = \
                        cve_data_all['nvd_cve_data_all'][cve_id]['description_tags']
                    cve_data_all['combined_cve_data_all'][cve_id]['description_detection_comment'] = \
                        "Based on NVD data"
    # Or Vulners
    if cve_data_all['combined_cve_data_all'][cve_id]['description'] == "":
        if 'vulners_cve_data_all' in cve_data_all:
            if cve_id in cve_data_all['vulners_cve_data_all']:
                if 'description' in cve_data_all['vulners_cve_data_all'][cve_id]:
                    cve_data_all['combined_cve_data_all'][cve_id]['description'] = \
                        cve_data_all['vulners_cve_data_all'][cve_id]['description']
                    # I should use description_tags (ranges) to mark products and vuln types in the description
                    cve_data_all['combined_cve_data_all'][cve_id]['description_tags'] = \
                        cve_data_all['vulners_cve_data_all'][cve_id]['description_tags']
                    cve_data_all['combined_cve_data_all'][cve_id]['description_detection_comment'] = \
                        "Based on Vulners data"
    # OR MS
    if cve_data_all['combined_cve_data_all'][cve_id]['description'] == "":
        if 'ms_cve_data_all' in cve_data_all:
            if cve_id in cve_data_all['ms_cve_data_all']:
                if 'description' in cve_data_all['ms_cve_data_all'][cve_id]:
                    cve_data_all['combined_cve_data_all'][cve_id]['description'] = \
                        cve_data_all['ms_cve_data_all'][cve_id]['description']
                    # I should use description_tags (ranges) to mark products and vuln types in the description
                    if 'description_tags' in cve_data_all['ms_cve_data_all'][cve_id]:
                        cve_data_all['combined_cve_data_all'][cve_id]['description_tags'] = \
                            cve_data_all['ms_cve_data_all'][cve_id]['description_tags']
                        cve_data_all['combined_cve_data_all'][cve_id]['description_detection_comment'] = \
                            "Based on MS data"
    return cve_data_all


def add_combined_cve_data(all_cves, cve_data_all):
    cve_data_all['combined_cve_data_all'] = dict()
    for cve_id in all_cves:
        cve_data_all['combined_cve_data_all'][cve_id] = dict()
        cve_data_all = add_combined_cve_data_vuln_product(cve_data_all, cve_id)
        cve_data_all = add_combined_cve_data_vuln_type(cve_data_all, cve_id)
        cve_data_all = add_combined_cve_data_basic_severity(cve_data_all, cve_id)
        cve_data_all = add_combined_cve_data_cvss_base_score(cve_data_all, cve_id)
        cve_data_all = add_combined_cve_data_description(cve_data_all, cve_id)
    return cve_data_all

def collect_cve_related_data(enabled_data_sources, all_cves, cves_to_exclude, rewrite_flag):
    """
    Collecting vulnerability data from the supported sources and
    combining basic vulnerability data in combined_cve_data_all
    :param all_cves:
    :param rewrite_flag:
    :return:
    """

    # Collecting vulnerability data from the supported sources
    functions_tools.print_debug_message("Counting CVE scores...")
    cve_data_all = dict()
    cve_data_all, cves_to_exclude = add_ms_cve_data(enabled_data_sources, all_cves, cve_data_all,
                                                    cves_to_exclude, rewrite_flag)
    cve_data_all = add_nvd_cve_data(enabled_data_sources, all_cves, cve_data_all, rewrite_flag)
    cve_data_all = add_attackerkb_cve_data(enabled_data_sources, all_cves, cve_data_all, rewrite_flag)
    cve_data_all = add_vulners_cve_data(enabled_data_sources, all_cves, cve_data_all, rewrite_flag)
    cve_data_all = add_combined_cve_data(all_cves, cve_data_all)
    return cve_data_all, cves_to_exclude